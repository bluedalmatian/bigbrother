#!/usr/bin/env python3

####################################################################
# BigBrother  CCTV Recording & Live Viewing (mirroring) software   #
# Copyright 2016-2022 Andrew Wood                                  #
#                                                                  #
# The main bigbrother daemon. This double forks a child process to #
# return to shell 						   #
#                                                                  #
# bigbrothercctv.org	                                           #
#                                                                  #
# Licensed under the GNU Public License v 3                        #
# The full license can be read at www.gnu.org/licenses/gpl-3.0.txt #
# and is included in the License.txt file included with this       #
# software.                                                        #
#                                                                  #
# BigBrother is free open source software but if you find it       #
# useful please consider making a donation to the Communications   #
# Museum Trust at www.comms.org.uk/donate                          #
####################################################################


#TO CHANGE VERSION NO ALTER bbversion VARIABLE BELOW ONLY
#BUT YOU WILL HAVE TO SET IT IN THE  pkg/deb/rpm PACKAGE AS WELL



import sys, os, time, signal, tempfile, re, datetime, pwd, subprocess

#######################################
class ParseException(Exception):
         def __init__(self, value):
                self.msg = value
#######################################

#######################################
#System wide knobs

bbversion=0.30 ##only change version no here and in no other file
exedir=os.path.dirname(os.path.realpath(__file__)) ##gives dir with no trailing /
globalconffile=exedir+"/bigbrother.conf"
dashfspecified=False
pidfilepath=exedir+"/pid"
print ("Given "+str((len(sys.argv)))+" args")
if ( (len(sys.argv)==3) and (sys.argv[1]=="-f") ):
	globalconffile=sys.argv[2]
	dashfspecified=True
	print ("-f specified ")

##following knobs to be read from config file
conffilepath=""	#this is the camera conf file
logfilepath=""
ffmpegcommand=""
user="" #this is the username we will try to switch to
allownewfilefromweb=False

##this knob to be calculated automatically
mirrorwebroot=exedir+"/mirrorwebroot"


#if the global options for doing mirroring (such as webroot dir) are not valid this flag will trap it if mirroring is requested later
mirroringconfigvalid=False

#######################################

#######################################
def cleanup():
	Log("Cleaning up "+mirrorwebroot)
	mirroringCleanup()
#######################################


#######################################
def readGlobalConfig():
	global ffmpegcommand
	global logfilepath
	global conffilepath
	global user
	global allownewfilefromweb
	global mirrorwebroot

	try:
        	conffile=open(globalconffile,'r')
        	lines=conffile.readlines()
        	conffile.close()
	except IOError:
		print ("Could not open global conf file "+globalconffile)
		exit(1)
	lineno=0
	for line in lines:
		lineno=lineno+1
		if line[0]=='#':
			continue
		if line[0]=='\n':
			continue
		try:
			cols=line.split()
			if (cols[0]=="cameraconf"):
				conffilepath=cols[1]
			elif (cols[0]=="ffmpegcommand"):
				ffmpegcommand=cols[1]
			elif (cols[0]=="logfile"):
				logfilepath=cols[1]
			elif (cols[0]=="user"):
				user=cols[1]
			elif (cols[0]=="allownewfilefromweb"):
				cols[1]=cols[1].lower()
				if (cols[1]=="true"):
					allownewfilefromweb=True
				else:
					allownewfilefromweb=False
			else:
				raise ParseException("unknown keyword "+cols[0])

		except ParseException(e):
			print ("Syntax error in "+globalconffile+" on line "+str(lineno))
			print ("\n")
			print (e.msg)
			exit(1)
############################################

pids=[] #List of PIDs of each (all) action subprocess
recordingpids=[] #List of PIDs of recording (only) subprocesses
cameras=[] #List of dictionaries of the configs of each cam

############################################
def handler(signum, frame):
	if signum==signal.SIGHUP:
		#forward SIGHUP to record subprocesses only
		#and only if allownewfilefromweb==True
		if (allownewfilefromweb==False):
			 Log("Got SIGHUP but allownewfilefromweb is set to False, ignoring")
			 return
		Log("Got signal "+str(signum))
		for cpid in recordingpids:
                        Log("Forwarding signal to OS PID: "+str(cpid))
                        os.kill(cpid, signal.SIGHUP)		
	else:
		#forward SIGINT to all subprocesses
		Log("Got signal "+str(signum))
		for cpid in pids:
			Log("Forwarding signal to OS PID: "+str(cpid))
			os.kill(cpid, signal.SIGINT)
		cleanup()
		Log(" bigbrotherd finished handling signal, exiting")
		sys.exit()
#############################################

#############################################
def Log(str,throw=False):
       	try:
                now=datetime.datetime.now()
                datestr=now.strftime("%Y-%m-%d %H:%M")
                file=open(logfilepath,'a')

                #if given just \n\n output it with no datetime prepended
                if str=="\n\n":
                        file.write(str)
                        file.close()
                        return()

                if str[len(str)-1]!="\n":
                        str=str+"\n"
                file.write(datestr+" "+str)
                file.close()
        except IOError(e):
                if (throw):
                        raise e
                else:
                        print ("ERROR: Could not open Log file an IOError was thrown, ignoring")
###############################################

###############################################
def directoryIsWritable(path):
    try:
        testfile = tempfile.TemporaryFile(dir = path)
        testfile.close()
    except OSError as e:
        return False
    return True
###############################################

###############################################
def containsDotsOrStars(str):
		result=re.search("[.]|[*]",str)
		if (result==None):
			return False
		else:
			return True
##############################################

##############################################
def onlyContainsLettersOrNumbers(str):
	result=re.search("^[A-Za-z0-9]+$",str)
	if (result==None):
		return False
	else:
		return True
##############################################

#############################################
def work():
	
	for cameraconf in cameras:
		Log("P3 Preparing to start "+str(cameraconf))
		if (cameraconf['recordmode']!="*"):
			#recording
			if (cameraconf['recordmode']=="C"):
				#by camera
				L=[]
				L.append(exedir+"/record_bycamera.sh")
				L.append("-cam")
				L.append(cameraconf['url'])
				L.append("-name")
				L.append(cameraconf['cam'])
				L.append("-group")
				L.append(cameraconf['group'])
				L.append("-folder")
				L.append(cameraconf['folder'])
				L.append("-log")
				L.append(logfilepath)
				L.append("-cmd")
				L.append(ffmpegcommand)
				L.append("-container")
				L.append(cameraconf['container'])
				cpid = os.spawnv(os.P_NOWAIT, exedir+'/record_bycamera.sh', L)
				pids.append(cpid)
				recordingpids.append(cpid)
				Log("P3 started camera recording process OS PID:"+str(cpid))

			elif (cameraconf['recordmode']=="D"):
				#by day
				L=[]
				L.append(exedir+"/record_byday.sh")
				L.append("-cam")
				L.append(cameraconf['url'])
				L.append("-name")
				L.append(cameraconf['cam'])
				L.append("-folder")
				L.append(cameraconf['folder'])
				L.append("-log")
				L.append(logfilepath)
				L.append("-cmd")
				L.append(ffmpegcommand)
				L.append("-container")
				L.append(cameraconf['container'])
				cpid = os.spawnv(os.P_NOWAIT, exedir+'/record_byday.sh', L)
				pids.append(cpid)
				recordingpids.append(cpid)
				Log("P3 started camera recording process OS PID:"+str(cpid))




		if (cameraconf['mirrormode']=="HLS"):
			#mirroring using HLS
			L=[]
			L.append(exedir+"/mirror_hls.sh")
			L.append("-cam")
			L.append(cameraconf['url'])
			L.append("-name")
			L.append(cameraconf['cam'])
			L.append("-log")
			L.append(logfilepath)
			L.append("-cmd")
			L.append(ffmpegcommand)
			L.append("-webroot")
			L.append(mirrorwebroot)
			cpid = os.spawnv(os.P_NOWAIT, exedir+'/mirror_hls.sh', L)
			pids.append(cpid)
			Log("P3 started camera mirroring process OS PID:"+str(cpid))




	Log("P3 setting up signal handlers")
	signal.signal(signal.SIGINT, handler)
	signal.signal(signal.SIGTERM, handler)
	signal.signal(signal.SIGQUIT, handler)
	signal.signal(signal.SIGHUP,handler)
	
	pid=os.getpid()
	Log("P3 is process ID "+str(pid)+", writing it to PID file at "+pidfilepath)
	try:
    		pidfile=open(pidfilepath,'w')
    		pidfile.truncate()
    		pidfile.write(str(pid))
    		pidfile.close()
	except IOError:
    		Log("P3 unable to write PID file")

	Log("P3 sleeping")
	while (1):
		time.sleep(4200)
###########################################

##########################################
def parseLine(line):
	cols=line.split()
	if (len(cols)!=7):
		errstr="Each camera action definition (line) needs 7 parameters, separated by spaces"
		raise ParseException(errstr)
	action={}
	action['cam']=cols[0]
	action['url']=cols[1]
	action['group']=cols[2]
	action['recordmode']=cols[3]
	action['mirrormode']=cols[4]
	action['folder']=cols[5]
	action['container']=cols[6]

	if ( (action['folder']=="*") and (action['recordmode']!="*")):
		raise ParseException("To do recording you must specify a folder")

	if ( (action['folder']!="*") ):

		if(  containsDotsOrStars(action['folder'])  and (action['recordmode']!="*") ):
			raise ParseException("Folder must be a literal Unix style folder path with no . or * characters")
	
		foldername=action['folder']
		lastidx=len(foldername)-1
	
		if ( (foldername[0]!="/") or (foldername[lastidx]=="/") ):
			raise ParseException("Folder must be a literal Unix style folder path with no trailing /")


	if (onlyContainsLettersOrNumbers(action['cam'])==False):
		raise ParseException("Camera Name must only contain letters and or numbers")

	if ( (action['recordmode']!="D") and  (action['recordmode']!="C") and  (action['recordmode']!="*") ):
		raise ParseException("Record Mode must be D, C or *")
	
	if ( (action['container']!="MP4") and  (action['container']!="*") ):
		raise ParseException("Container Format must be MP4 or *")
		
	if ( ( (action['container']=="*") and  (action['recordmode']!="*") ) or ( (action['container']!="*") and (action['recordmode']=="*") ) ):
		raise ParseException("To record you must specify both a record mode and a container format")

	action['container']=(action['container'].lower())

	if ( (action['mirrormode']!="HLS") and  (action['mirrormode']!="*") ):		
		 raise ParseException("Mirror Mode must be HLS or *")

	if ( (action['mirrormode']!="*") and mirroringconfigvalid==False ):
		raise ParseException("Mirroring requested, but mirroring config (in global config file) is not valid, check the global config file")

	if ( (action['recordmode']=="C") and (action['group']=="*") ):
		raise ParseException("Record mode is C but you have not specified a Group Name")

	if (action['group']!="*"):
		if (onlyContainsLettersOrNumbers(action['group'])==False):
                	raise ParseException("Group Name must only contain letters and or numbers")

	
	if (action['recordmode']!="*"):
		#folder must exist
		if (os.path.isdir(action['folder'])==False):
                        raise ParseException(action['folder']+" must exist")
		if (os.path.isdir(action['folder']+"/bycamera")==False):
                        raise ParseException(action['folder']+" must contain a bycamera folder")

		if ( (os.path.isdir(action['folder']+"/byday/Monday")==False) or (os.path.isdir(action['folder']+"/byday/Tuesday")==False) or (os.path.isdir(action['folder']+"/byday/Thursday")==False) or (os.path.isdir(action['folder']+"/byday/Wednesday")==False) or (os.path.isdir(action['folder']+"/byday/Friday")==False) or (os.path.isdir(action['folder']+"/byday/Saturday")==False) or (os.path.isdir(action['folder']+"/byday/Sunday")==False)  ):
                        raise ParseException(action['folder']+" must contain a byday folder with subfolders for each day")

		if (directoryIsWritable(action['folder']+"/byday/Monday")==False):
			raise ParseException(action['folder']+"/byday/Monday is not writable")

		if (directoryIsWritable(action['folder']+"/byday/Tuesday")==False):
                        raise ParseException(action['folder']+"/byday/Tuesday is not writable")

		if (directoryIsWritable(action['folder']+"/byday/Wednesday")==False):
                        raise ParseException(action['folder']+"/byday/Wednesday is not writable")
		
		if (directoryIsWritable(action['folder']+"/byday/Thursday")==False):
                        raise ParseException(action['folder']+"/byday/Thursday is not writable")

		if (directoryIsWritable(action['folder']+"/byday/Friday")==False):
                        raise ParseException(action['folder']+"/byday/Friday is not writable")

		if (directoryIsWritable(action['folder']+"/byday/Saturday")==False):
                        raise ParseException(action['folder']+"/byday/Saturday is not writable")




	if (action['recordmode']=="C"):
		#need to check group folder exists & we can write to it
		if (os.path.isdir(action['folder']+"/bycamera/"+action['group'])==False):
			raise ParseException("Group Name must exist as a folder under "+action['folder']+"/bycamera")

		if (directoryIsWritable(action['folder']+"/bycamera/"+action['group'])==False):
			raise ParseException(action['folder']+"/bycamera/"+action['group']+" is not writable")
		
	
	#passed
	print ("Found "+str(action))
	return action
############################################

############################################
def checkForDuplicates(key,descrip):
	L=[]
	for cameradict in cameras:
		totest=cameradict[key].upper()
		if totest in L:
			raise ParseException("Duplicate entry for "+descrip+" "+cameradict[key]+" (case insensitive)")
	
		else:
			toadd=cameradict[key].upper()
			L.append(toadd)
	return False
###########################################	

###########################################
def readConfig():
	try:
		conffile=open(conffilepath,'r')
		lines=conffile.readlines()
		conffile.close()
	except IOError:
		print ("Could not open camera conf file "+conffilepath)
		exit(1)
	lineno=0
	for line in lines:
		lineno=lineno+1
		if line[0]=='#':
			continue
		if line[0]=='\n':
			continue
		try:
			cameras.append(parseLine(line))
			checkForDuplicates("cam","Camera Name")
			checkForDuplicates("url","URL")
		except ParseException(e):
			print ("Syntax error in "+conffilepath+" on line "+str(lineno))
			print ("\n")
			print (e.msg)
			exit(1)
###########################################

###########################################
def mirroringCleanup():
	#delete any old files in mirrorwebroot such as the control file and any video files
	Log("P3 removing old control file from webroot")
	time.sleep(10)
	try:
		controlfile=mirrorwebroot+"/org.bigbrothercctv.bigbrother.bigbrotherd.php"
		subprocess.call("rm "+controlfile,shell=True)
	except: #all exceptions
		Log("P3 could not cleanup "+controlfile)

	Log("P3 removing old video files from webroot")
	videofilestodelete=["*.m3u8","*.ts"] #when new mirror video formats are supported add them to here
	for file in videofilestodelete:
		try:
       	 		subprocess.call("rm -f "+mirrorwebroot+"/"+file,shell=True)
		except: #all exceptions
			 Log("P3 could not cleanup "+file+" files from "+mirrorwebroot )
##########################################

###########################################
def mirroringInit():
	Log("P3 cleaning up webroot in case last run was not cleanly shut down")
	mirroringCleanup()
	mirrorcontrolfilepath=mirrorwebroot+"/org.bigbrothercctv.bigbrother.bigbrotherd.php"
	Log("P3 generating "+mirrorcontrolfilepath)
	try:
		mirrorcontrolfile=open(mirrorcontrolfilepath,"w")
		mirrorcontrolfile.write("<?php\n");
		mirrorcontrolfile.write("##THIS FILE IS GENERATED AUTOMATICALLY BY bigbrotherd##\n")
		mirrorcontrolfile.write("$DAEMONPID="+str(os.getpid())+";\n")
		mirrorcontrolfile.write("$GLOBALCONFFILEPATH='"+globalconffile+"';\n")
		mirrorcontrolfile.write("$BBVERSION="+str(bbversion)+";\n")
		mirrorcontrolfile.write("$ALLOWNEWFILEFROMWEB="+str(allownewfilefromweb)+";\n")
		mirrorcontrolfile.write("?>\n") 
		mirrorcontrolfile.close()
	except:
		Log("P3 could not initialise "+mirrorcontrolfilepath+" mirroring will not work");
##########################################




##################################################
#MAIN PROGRAM
##################################################
readGlobalConfig()
print ("Working with following config directives from "+globalconffile+":")
print ("ffmpegcommand="+ffmpegcommand)
print ("cameraconf="+conffilepath)
print ("logfile="+logfilepath)
print ("user="+user)
print ("allownewfilefromweb="+str(allownewfilefromweb))

print ("Mirroring web root folder is: "+mirrorwebroot)

if ( (conffilepath=="") or (logfilepath=="") or (ffmpegcommand=="") or (user=="") ):
        print ("Error initialising configuration options from "+globalconffile)
        exit(1)


try:
	Log("\n\n",True)
except IOError:
	print("Could not open log file "+logfilepath+", check the file permissions")
	exit(1)

Log("Starting... (P1)")
Log("Global config file is:"+globalconffile)
if (dashfspecified):
	Log("Global config file was specified in -f command line arg")
Log("ffmpegcommand is: "+ffmpegcommand)
Log("cameraconf is: "+conffilepath)
Log("user is: "+user)


#switch to specified user
Log("P1 switching user to "+user)
try:
   	userid=pwd.getpwnam(user).pw_uid
except KeyError:
        Log("Could not switch user, UID for username could not be found. Fatal. P1 Exiting")
        exit(1)
try:

	##need to chown of log file to specified user, as if we created it in 1st call
	##to Log() then it will not have correct ownership after we switch user
	os.chown(logfilepath,userid,-1)
	os.setuid(userid)
except OSError:
	Log("Could not switch user to user id "+str(userid)+". Fatal. P1 Exiting")
	exit(1)

try:
	Log("Switched user successfully to "+user+" ("+str(userid)+")",True)  
except IOError:
	print("Could not write to log file after switching to user "+user+" ("+str(userid)+"). Fatal. P1 Exiting")
	exit(1)


if ( directoryIsWritable(mirrorwebroot) ):
        mirroringconfigvalid=True
else:
	mirroringconfigvalid=False
	Log("Unable to write to mirrorwebroot after switching user to  "+user+" ("+str(userid)+")")
	print("Unable to write to mirrorwebroot after switching user to  "+user+" ("+str(userid)+"). Check user has write permission for the directory.")
	exit(1)



#readConfig() does directory writable permission test so we must have switched users by here
readConfig() ##this is the camera conf file
Log("P1 Camera Config read & parsed OK, forking 1st child (P2)")
pid=os.fork()

if (pid==0):
	os.setsid()
	Log("P2 forking 2nd child (P3)")
	pid=os.fork()
	if (pid==0):
		#daemons work
		Log("P3 closing FDs")
		# Iterate through and close all file descriptors.
		for fd in range(0, 1024):
			try:
				os.close(fd)
			except OSError:	# ERROR, fd wasn't open to begin with (ignored)
				pass

   		   # Redirect the standard I/O file descriptors to /dev/null. 

   		   # This call to open is guaranteed to return the lowest file descriptor,
   		   # which will be 0 (stdin), since it was closed above.
		os.open("/dev/null", os.O_RDWR)	# standard input (0)
		# Duplicate standard input to standard output and standard error.
		os.dup2(0, 1)			# standard output (1)
		os.dup2(0, 2)			# standard error (2)
		Log("P3 initialising "+mirrorwebroot)
		mirroringInit()
		Log("P3 calling work()")
		work()
		Log("P3 returned from work()")
		#we never get here usually because sig handler calls exit
		#end daemons work
	else:
		Log("P2 exiting")
		exit(0)
else:
	Log("P1 exiting")
	exit(0)
